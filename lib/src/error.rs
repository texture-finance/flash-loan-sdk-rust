//! Error types

use std::fmt::{Display, Formatter};

use num_derive::FromPrimitive;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

/// Errors that may be returned by the Flash Loan program.
#[derive(Clone, Debug, Eq, Error, PartialEq)]
pub enum FlashSdkError {
    RpcError,
    DeserializationError,
    FlashError(FlashProgramError),
}

impl Display for FlashSdkError {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        match self {
            FlashSdkError::RpcError => f.write_str("RpcError"),
            FlashSdkError::DeserializationError => f.write_str("DeserializationError"),
            FlashSdkError::FlashError(flash_err) => flash_err.fmt(f),
        }
    }
}

/// Errors that may be returned by the Flash Loan program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum FlashProgramError {
    // 0
    /// Invalid instruction data passed in.
    #[error("Failed to unpack instruction data")]
    InstructionUnpackError,
    /// The account cannot be initialized because it is already in use.
    #[error("Account is already initialized")]
    AlreadyInitialized,
    /// Lamport balance below rent-exempt threshold.
    #[error("Lamport balance below rent-exempt threshold")]
    NotRentExempt,
    /// The program address provided doesn't match the value generated by the program.
    #[error("Market authority is invalid")]
    InvalidMarketAuthority,
    /// Expected a different market owner
    #[error("Market owner is invalid")]
    InvalidMarketOwner,

    // 5
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("Input account owner is not the program address")]
    InvalidAccountOwner,
    /// The owner of the account input isn't set to the correct token program id.
    #[error("Input token account is not owned by the correct token program id")]
    InvalidTokenOwner,
    /// Expected an SPL Token account
    #[error("Input token account is not valid")]
    InvalidTokenAccount,
    /// Expected an SPL Token mint
    #[error("Input token mint account is not valid")]
    InvalidTokenMint,
    /// Expected a different SPL Token program
    #[error("Input token program account is not valid")]
    InvalidTokenProgram,

    // 10
    /// Invalid amount, must be greater than zero
    #[error("Input amount is invalid")]
    InvalidAmount,
    /// Invalid config value
    #[error("Input config value is invalid")]
    InvalidConfig,
    /// Invalid config value
    #[error("Input account must be a signer")]
    InvalidSigner,
    /// Invalid account input
    #[error("Invalid account input")]
    InvalidAccountInput,
    /// Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow,

    // 15
    /// Token initialize mint failed
    #[error("Token initialize mint failed")]
    TokenInitializeMintFailed,
    /// Token initialize account failed
    #[error("Token initialize account failed")]
    TokenInitializeAccountFailed,
    /// Token transfer failed
    #[error("Token transfer failed")]
    TokenTransferFailed,
    /// Token mint to failed
    #[error("Token mint to failed")]
    TokenMintToFailed,
    /// Token burn failed
    #[error("Token burn failed")]
    TokenBurnFailed,

    // 20
    /// Insufficient liquidity available
    #[error("Insufficient liquidity available")]
    InsufficientLiquidity,
    /// Withdraw amount too small
    #[error("Withdraw amount too small")]
    WithdrawTooSmall,
    /// Withdraw amount too large
    #[error("Withdraw amount too large")]
    WithdrawTooLarge,
    /// Borrow amount too small
    #[error("Borrow amount too small to receive liquidity after fees")]
    BorrowTooSmall,
    /// Borrow amount too large
    #[error("Borrow amount cannot exceed available liquidity amount")]
    BorrowTooLarge,

    //25
    /// Expected a different flash loan receiver program
    #[error("Input flash loan receiver program account is not valid")]
    InvalidFlashLoanReceiverProgram,
    /// Not enough liquidity after flash loan
    #[error("Not enough liquidity after flash loan")]
    NotEnoughLiquidityAfterFlashLoan,
    /// No cpi flash borrows allowed
    #[error("No cpi flash borrows allowed")]
    FlashBorrowCpi,
    /// No corresponding repay found for flash borrow
    #[error("No corresponding repay found for flash borrow")]
    NoFlashRepayFound,
    /// Invalid flash repay found for borrow
    #[error("Invalid repay found for flash borrow")]
    InvalidFlashRepay,

    // 30
    /// No cpi flash repays allowed
    #[error("No cpi flash repays allowed")]
    FlashRepayCpi,
    /// Multiple flash borrows not allowed in the same transaction
    #[error("Multiple flash borrows not allowed in the same transaction")]
    MultipleFlashBorrows,
    /// Flash loans are disabled for this reserve
    #[error("Flash loans are disabled for this reserve")]
    FlashLoansDisabled,
}

impl From<FlashProgramError> for ProgramError {
    fn from(e: FlashProgramError) -> Self {
        ProgramError::Custom(e as u32)
    }
}

impl<T> DecodeError<T> for FlashProgramError {
    fn type_of() -> &'static str {
        "Flash Loan Error"
    }
}
